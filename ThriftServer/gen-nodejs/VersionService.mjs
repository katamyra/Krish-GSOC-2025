//
// Autogenerated by Thrift Compiler (0.23.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

import { Thrift } from 'thrift';
import { Q } from 'thrift';
import Int64 from 'node-int64';

import * as ttypes from './server_types.mjs';
//HELPER FUNCTIONS AND STRUCTURES

var VersionService_getApiVersion_args = function(args) {
};
VersionService_getApiVersion_args.prototype = {};
VersionService_getApiVersion_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VersionService_getApiVersion_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('VersionService_getApiVersion_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VersionService_getApiVersion_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
VersionService_getApiVersion_result.prototype = {};
VersionService_getApiVersion_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VersionService_getApiVersion_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('VersionService_getApiVersion_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VersionService_getCatalogItems_args = function(args) {
  this.filter = null;
  if (args) {
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new ttypes.CatalogFilter(args.filter);
    }
  }
};
VersionService_getCatalogItems_args.prototype = {};
VersionService_getCatalogItems_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new ttypes.CatalogFilter();
        this.filter[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VersionService_getCatalogItems_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('VersionService_getCatalogItems_args');
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 1);
    this.filter[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VersionService_getCatalogItems_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.ResearchItem]);
    }
  }
};
VersionService_getCatalogItems_result.prototype = {};
VersionService_getCatalogItems_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp316 = input.readListBegin();
        var _size15 = _rtmp316.size || 0;
        for (var _i17 = 0; _i17 < _size15; ++_i17) {
          var elem18 = null;
          elem18 = new ttypes.ResearchItem();
          elem18[Symbol.for("read")](input);
          this.success.push(elem18);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VersionService_getCatalogItems_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('VersionService_getCatalogItems_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter19 in this.success) {
      if (this.success.hasOwnProperty(iter19)) {
        iter19 = this.success[iter19];
        iter19[Symbol.for("write")](output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VersionService_getResearchItem_args = function(args) {
  this.itemId = null;
  if (args) {
    if (args.itemId !== undefined && args.itemId !== null) {
      this.itemId = args.itemId;
    }
  }
};
VersionService_getResearchItem_args.prototype = {};
VersionService_getResearchItem_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.itemId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VersionService_getResearchItem_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('VersionService_getResearchItem_args');
  if (this.itemId !== null && this.itemId !== undefined) {
    output.writeFieldBegin('itemId', Thrift.Type.STRING, 1);
    output.writeString(this.itemId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VersionService_getResearchItem_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ResearchItem(args.success);
    }
  }
};
VersionService_getResearchItem_result.prototype = {};
VersionService_getResearchItem_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ResearchItem();
        this.success[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VersionService_getResearchItem_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('VersionService_getResearchItem_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VersionService_searchCatalog_args = function(args) {
  this.query = null;
  if (args) {
    if (args.query !== undefined && args.query !== null) {
      this.query = args.query;
    }
  }
};
VersionService_searchCatalog_args.prototype = {};
VersionService_searchCatalog_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VersionService_searchCatalog_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('VersionService_searchCatalog_args');
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 1);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VersionService_searchCatalog_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.ResearchItem]);
    }
  }
};
VersionService_searchCatalog_result.prototype = {};
VersionService_searchCatalog_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp321 = input.readListBegin();
        var _size20 = _rtmp321.size || 0;
        for (var _i22 = 0; _i22 < _size20; ++_i22) {
          var elem23 = null;
          elem23 = new ttypes.ResearchItem();
          elem23[Symbol.for("read")](input);
          this.success.push(elem23);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VersionService_searchCatalog_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('VersionService_searchCatalog_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter24 in this.success) {
      if (this.success.hasOwnProperty(iter24)) {
        iter24 = this.success[iter24];
        iter24[Symbol.for("write")](output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VersionService_getAllTags_args = function(args) {
};
VersionService_getAllTags_args.prototype = {};
VersionService_getAllTags_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VersionService_getAllTags_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('VersionService_getAllTags_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VersionService_getAllTags_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
  }
};
VersionService_getAllTags_result.prototype = {};
VersionService_getAllTags_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp326 = input.readListBegin();
        var _size25 = _rtmp326.size || 0;
        for (var _i27 = 0; _i27 < _size25; ++_i27) {
          var elem28 = null;
          elem28 = input.readString();
          this.success.push(elem28);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VersionService_getAllTags_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('VersionService_getAllTags_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter29 in this.success) {
      if (this.success.hasOwnProperty(iter29)) {
        iter29 = this.success[iter29];
        output.writeString(iter29);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VersionServiceClient = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
VersionServiceClient.prototype = {};
VersionServiceClient.prototype.seqid = function() { return this._seqid; };
VersionServiceClient.prototype.new_seqid = function() { return this._seqid += 1; };

VersionServiceClient.prototype.getApiVersion = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getApiVersion();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getApiVersion();
  }
};

VersionServiceClient.prototype.send_getApiVersion = function() {
  var output = new this.pClass(this.output);
  var args = new VersionService_getApiVersion_args();
  try {
    output.writeMessageBegin('getApiVersion', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

VersionServiceClient.prototype.recv_getApiVersion = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new VersionService_getApiVersion_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getApiVersion failed: unknown result');
};

VersionServiceClient.prototype.getCatalogItems = function(filter, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getCatalogItems(filter);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getCatalogItems(filter);
  }
};

VersionServiceClient.prototype.send_getCatalogItems = function(filter) {
  var output = new this.pClass(this.output);
  var params = {
    filter: filter
  };
  var args = new VersionService_getCatalogItems_args(params);
  try {
    output.writeMessageBegin('getCatalogItems', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

VersionServiceClient.prototype.recv_getCatalogItems = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new VersionService_getCatalogItems_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getCatalogItems failed: unknown result');
};

VersionServiceClient.prototype.getResearchItem = function(itemId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getResearchItem(itemId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getResearchItem(itemId);
  }
};

VersionServiceClient.prototype.send_getResearchItem = function(itemId) {
  var output = new this.pClass(this.output);
  var params = {
    itemId: itemId
  };
  var args = new VersionService_getResearchItem_args(params);
  try {
    output.writeMessageBegin('getResearchItem', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

VersionServiceClient.prototype.recv_getResearchItem = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new VersionService_getResearchItem_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getResearchItem failed: unknown result');
};

VersionServiceClient.prototype.searchCatalog = function(query, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_searchCatalog(query);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_searchCatalog(query);
  }
};

VersionServiceClient.prototype.send_searchCatalog = function(query) {
  var output = new this.pClass(this.output);
  var params = {
    query: query
  };
  var args = new VersionService_searchCatalog_args(params);
  try {
    output.writeMessageBegin('searchCatalog', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

VersionServiceClient.prototype.recv_searchCatalog = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new VersionService_searchCatalog_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('searchCatalog failed: unknown result');
};

VersionServiceClient.prototype.getAllTags = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getAllTags();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAllTags();
  }
};

VersionServiceClient.prototype.send_getAllTags = function() {
  var output = new this.pClass(this.output);
  var args = new VersionService_getAllTags_args();
  try {
    output.writeMessageBegin('getAllTags', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

VersionServiceClient.prototype.recv_getAllTags = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new VersionService_getAllTags_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getAllTags failed: unknown result');
};
export { VersionServiceClient as Client };
var VersionServiceProcessor = function(handler) {
  this._handler = handler;
};
VersionServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x[Symbol.for("write")](output);
    output.writeMessageEnd();
    output.flush();
  }
};
VersionServiceProcessor.prototype.process_getApiVersion = function(seqid, input, output) {
  var args = new VersionService_getApiVersion_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.getApiVersion.length === 0) {
    Q.fcall(this._handler.getApiVersion.bind(this._handler)
    ).then(function(result) {
      var result_obj = new VersionService_getApiVersion_result({success: result});
      output.writeMessageBegin("getApiVersion", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("getApiVersion", Thrift.MessageType.EXCEPTION, seqid);
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getApiVersion(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new VersionService_getApiVersion_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getApiVersion", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getApiVersion", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
VersionServiceProcessor.prototype.process_getCatalogItems = function(seqid, input, output) {
  var args = new VersionService_getCatalogItems_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.getCatalogItems.length === 1) {
    Q.fcall(this._handler.getCatalogItems.bind(this._handler),
      args.filter
    ).then(function(result) {
      var result_obj = new VersionService_getCatalogItems_result({success: result});
      output.writeMessageBegin("getCatalogItems", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("getCatalogItems", Thrift.MessageType.EXCEPTION, seqid);
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getCatalogItems(args.filter, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new VersionService_getCatalogItems_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getCatalogItems", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getCatalogItems", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
VersionServiceProcessor.prototype.process_getResearchItem = function(seqid, input, output) {
  var args = new VersionService_getResearchItem_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.getResearchItem.length === 1) {
    Q.fcall(this._handler.getResearchItem.bind(this._handler),
      args.itemId
    ).then(function(result) {
      var result_obj = new VersionService_getResearchItem_result({success: result});
      output.writeMessageBegin("getResearchItem", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("getResearchItem", Thrift.MessageType.EXCEPTION, seqid);
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getResearchItem(args.itemId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new VersionService_getResearchItem_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getResearchItem", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getResearchItem", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
VersionServiceProcessor.prototype.process_searchCatalog = function(seqid, input, output) {
  var args = new VersionService_searchCatalog_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.searchCatalog.length === 1) {
    Q.fcall(this._handler.searchCatalog.bind(this._handler),
      args.query
    ).then(function(result) {
      var result_obj = new VersionService_searchCatalog_result({success: result});
      output.writeMessageBegin("searchCatalog", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("searchCatalog", Thrift.MessageType.EXCEPTION, seqid);
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.searchCatalog(args.query, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new VersionService_searchCatalog_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("searchCatalog", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("searchCatalog", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
VersionServiceProcessor.prototype.process_getAllTags = function(seqid, input, output) {
  var args = new VersionService_getAllTags_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.getAllTags.length === 0) {
    Q.fcall(this._handler.getAllTags.bind(this._handler)
    ).then(function(result) {
      var result_obj = new VersionService_getAllTags_result({success: result});
      output.writeMessageBegin("getAllTags", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("getAllTags", Thrift.MessageType.EXCEPTION, seqid);
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getAllTags(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new VersionService_getAllTags_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getAllTags", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAllTags", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
export { VersionServiceProcessor as Processor };
