//
// Autogenerated by Thrift Compiler (0.23.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

import thrift = require('thrift');
import Thrift = thrift.Thrift;
import Q = thrift.Q;
import Int64 = require('node-int64');

import ttypes = require('./server_types');
import ResearchItemType = ttypes.ResearchItemType
import ResearchItem = ttypes.ResearchItem
import CatalogFilter = ttypes.CatalogFilter

declare class Client {
  private output: thrift.TTransport;
  private pClass: thrift.TProtocol;
  private _seqid: number;

  constructor(output: thrift.TTransport, pClass: { new(trans: thrift.TTransport): thrift.TProtocol });

  getApiVersion(): string;

  getApiVersion(callback: (error: void, response: string)=>void): void;

  getCatalogItems(filter: CatalogFilter): ResearchItem[];

  getCatalogItems(filter: CatalogFilter, callback: (error: void, response: ResearchItem[])=>void): void;

  getResearchItem(itemId: string): ResearchItem;

  getResearchItem(itemId: string, callback: (error: void, response: ResearchItem)=>void): void;

  searchCatalog(query: string): ResearchItem[];

  searchCatalog(query: string, callback: (error: void, response: ResearchItem[])=>void): void;

  getAllTags(): string[];

  getAllTags(callback: (error: void, response: string[])=>void): void;
}

declare class Processor {
  private _handler: object;

  constructor(handler: object);
  process(input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getApiVersion(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getCatalogItems(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getResearchItem(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_searchCatalog(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getAllTags(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
}
